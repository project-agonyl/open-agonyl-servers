name: Docker Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        service:
          - name: main-server
            dockerfile: build/Dockerfile.main-server
            context: .
          - name: login-server
            dockerfile: build/Dockerfile.login-server
            context: .
          - name: account-server
            dockerfile: build/Dockerfile.account-server
            context: .
          - name: gate-server
            dockerfile: build/Dockerfile.gate-server
            context: .
          - name: migrate
            dockerfile: build/Dockerfile.migrate
            context: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Make Docker image public
        run: |
          # Make the package public using GitHub API
          PACKAGE_NAME="${{ matrix.service.name }}"
          
          # Get the package version ID for the current tag
          PACKAGE_VERSION_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/user/packages/container/${PACKAGE_NAME}/versions" | \
            jq -r '.[] | select(.metadata.container.tags[] | contains("${{ github.ref_name }}")) | .id' | head -1)
          
          if [ "$PACKAGE_VERSION_ID" != "null" ] && [ "$PACKAGE_VERSION_ID" != "" ]; then
            # Make the specific version public
            curl -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"visibility":"public"}' \
              "https://api.github.com/user/packages/container/${PACKAGE_NAME}/versions/${PACKAGE_VERSION_ID}"
            
            echo "Made $PACKAGE_NAME:${{ github.ref_name }} public"
          else
            echo "Could not find package version ID for $PACKAGE_NAME:${{ github.ref_name }}"
          fi
          
          # Also make the entire package public (affects all versions)
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"visibility":"public"}' \
            "https://api.github.com/user/packages/container/${PACKAGE_NAME}" || echo "Package may already be public or not found"

  comment-on-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Release Description
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üê≥ Docker Images Built Successfully!

            The following Docker images have been built and pushed to the GitHub Container Registry:

            ### Pull Commands
            \`\`\`bash
            # Pull images for this release
            docker pull ghcr.io/${{ github.repository }}/main-server:${{ github.ref_name }}
            docker pull ghcr.io/${{ github.repository }}/login-server:${{ github.ref_name }}
            docker pull ghcr.io/${{ github.repository }}/account-server:${{ github.ref_name }}
            docker pull ghcr.io/${{ github.repository }}/gate-server:${{ github.ref_name }}
            docker pull ghcr.io/${{ github.repository }}/migrate:${{ github.ref_name }}
            \`\`\`

            ### Docker Compose Example
            \`\`\`yaml
            version: '3.8'
            services:
              main-server:
                image: ghcr.io/${{ github.repository }}/main-server:${{ github.ref_name }}
                ports:
                  - "5555:5555"
              
              login-server:
                image: ghcr.io/${{ github.repository }}/login-server:${{ github.ref_name }}
                ports:
                  - "3550:3550"
              
              account-server:
                image: ghcr.io/${{ github.repository }}/account-server:${{ github.ref_name }}
                ports:
                  - "5589:5589"
              
              gate-server:
                image: ghcr.io/${{ github.repository }}/gate-server:${{ github.ref_name }}
                ports:
                  - "9860:9860"

              migrate:
                image: ghcr.io/${{ github.repository }}/migrate:${{ github.ref_name }}
                # Run once to migrate database
            \`\`\`

            ### Available Tags
            - \`${{ github.ref_name }}\` (exact tag)
            - \`latest\` (if this is the latest release)
            - Platform support: \`linux/amd64\`, \`linux/arm64\`

            Built with ‚ù§Ô∏è by GitHub Actions`;

            try {
              // Find the release by tag name
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: '${{ github.ref_name }}'
              });
              
              // Get current release body
              const currentBody = release.body || '';
              
              // Check if our comment is already in the body
              if (currentBody.includes('üê≥ Docker Images Built Successfully!')) {
                console.log('Release already contains Docker images information');
                return;
              }
              
              // Append our comment to the existing body
              const newBody = currentBody + '\n\n' + comment;
              
              // Update the release
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                body: newBody
              });
              
              console.log('Release description updated successfully');
              
            } catch (error) {
              console.log('Error updating release:', error.message);
              
              // If release doesn't exist, create it
              if (error.status === 404) {
                try {
                  await github.rest.repos.createRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag_name: '${{ github.ref_name }}',
                    name: 'Release ${{ github.ref_name }}',
                    body: comment,
                    draft: false,
                    prerelease: false
                  });
                  console.log('Release created successfully');
                } catch (createError) {
                  console.log('Error creating release:', createError.message);
                }
              }
            } 