name: Docker Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        service:
          - name: main-server
            dockerfile: build/Dockerfile.main-server
            context: .
          - name: login-server
            dockerfile: build/Dockerfile.login-server
            context: .
          - name: account-server
            dockerfile: build/Dockerfile.account-server
            context: .
          - name: gate-server
            dockerfile: build/Dockerfile.gate-server
            context: .
          - name: migrate
            dockerfile: build/Dockerfile.migrate
            context: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Make Docker image public
        run: |
          PACKAGE_NAME="${{ matrix.service.name }}"
          TAG="${{ github.ref_name }}"
          ORG="${{ github.repository_owner }}"

          echo "Fetching package version ID for $PACKAGE_NAME:$TAG from $ORG"
          VERSION_API="https://api.github.com/orgs/${ORG}/packages/container/${PACKAGE_NAME}/versions"
          VERSION_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$VERSION_API" | \
            jq -r ".[] | select(.metadata.container.tags[]? == \"$TAG\") | .id" | head -1)

          if [ -n "$VERSION_ID" ]; then
            echo "Making version $VERSION_ID public..."
            curl -s -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"visibility":"public"}' \
              "https://api.github.com/orgs/${ORG}/packages/container/${PACKAGE_NAME}/versions/${VERSION_ID}"
          else
            echo "Could not find matching version for tag: $TAG"
          fi

          echo "Making package $PACKAGE_NAME public (all versions)"
          curl -s -X PATCH \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"visibility":"public"}' \
            "https://api.github.com/orgs/${ORG}/packages/container/${PACKAGE_NAME}" || echo "Could not make package public (maybe already public)"

  comment-on-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Attach Docker Info to Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = context.ref.replace('refs/tags/', '');

            const comment = `## üê≥ Docker Images Built Successfully!

            The following Docker images have been built and pushed to the GitHub Container Registry:

            ### Pull Commands
            \`\`\`bash
            docker pull ghcr.io/${owner}/main-server:${tag}
            docker pull ghcr.io/${owner}/login-server:${tag}
            docker pull ghcr.io/${owner}/account-server:${tag}
            docker pull ghcr.io/${owner}/gate-server:${tag}
            docker pull ghcr.io/${owner}/migrate:${tag}
            \`\`\`

            ### Docker Compose Example
            \`\`\`yaml
            version: '3.8'
            services:
              main-server:
                image: ghcr.io/${owner}/main-server:${tag}
                ports:
                  - "5555:5555"
              
              login-server:
                image: ghcr.io/${owner}/login-server:${tag}
                ports:
                  - "3550:3550"
              
              account-server:
                image: ghcr.io/${owner}/account-server:${tag}
                ports:
                  - "5589:5589"
              
              gate-server:
                image: ghcr.io/${owner}/gate-server:${tag}
                ports:
                  - "9860:9860"

              migrate:
                image: ghcr.io/${owner}/migrate:${tag}
                # Run once to migrate database
            \`\`\`

            ### Available Tags
            - \`${tag}\`
            - Platform support: \`linux/amd64\`, \`linux/arm64\`

            Built with ‚ù§Ô∏è by GitHub Actions`;

            try {
              let release;
              try {
                release = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              } catch (err) {
                if (err.status === 404) {
                  release = await github.rest.repos.createRelease({
                    owner,
                    repo,
                    tag_name: tag,
                    name: `Release ${tag}`,
                    body: comment,
                    draft: false,
                    prerelease: false
                  });
                  console.log(`Created release for tag ${tag}`);
                  return;
                } else {
                  throw err;
                }
              }

              const body = release.data.body || '';
              if (!body.includes('üê≥ Docker Images Built Successfully!')) {
                await github.rest.repos.updateRelease({
                  owner,
                  repo,
                  release_id: release.data.id,
                  body: `${body}\n\n${comment}`
                });
                console.log(`Appended Docker image info to release ${tag}`);
              } else {
                console.log('Release already contains Docker info');
              }
            } catch (err) {
              console.error(`Failed to update release: ${err.message}`);
              core.setFailed(err.message);
            }
