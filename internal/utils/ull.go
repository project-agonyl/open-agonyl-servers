package utils

var cryptTable = []byte{
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x23, 0x23, 0x23, 0x20, 0x46, 0x6F, 0x72, 0x20, 0x6F,
	0x75, 0x72, 0x20, 0x65, 0x76, 0x65, 0x72, 0x6C, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x6C,
	0x6F, 0x76, 0x65, 0x2E, 0x20, 0x46, 0x72, 0x6F, 0x6D, 0x20, 0x32, 0x34, 0x20, 0x44, 0x65, 0x63,
	0x2C, 0x20, 0x31, 0x39, 0x39, 0x34, 0x2E, 0x20, 0x23, 0x23, 0x23, 0x23, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x4F, 0x6F, 0x6F, 0x70, 0x73, 0x2E, 0x20, 0x57, 0x68, 0x6F, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x3F, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x6E, 0x6F, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6F, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20,
	0x72, 0x65, 0x61, 0x64, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2E, 0x20, 0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x63, 0x6C, 0x6F, 0x73, 0x65, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x2C, 0x20, 0x45, 0x6E, 0x6A, 0x6F, 0x79, 0x20, 0x6F, 0x75, 0x72, 0x20,
	0x67, 0x61, 0x6D, 0x65, 0x20, 0x41, 0x33, 0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x61, 0x6C, 0x77,
	0x61, 0x79, 0x73, 0x20, 0x62, 0x65, 0x20, 0x68, 0x61, 0x70, 0x70, 0x79, 0x7E, 0x21, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x20, 0x54, 0x68, 0x65, 0x20, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x2D, 0x54, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6C, 0x20, 0x2D,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
}

func DecodeULL(buffer *[]byte, size int) {
	for i, j := 1, size-1; i < size; i, j = i+1, j-1 {
		(*buffer)[j] = byte(byte(i) ^ (byte(size) ^ (cryptTable[(*buffer)[j-1]] ^ (*buffer)[j])))
	}
}

func EncodeULL(buffer *[]byte, size int) {
	for i, j := size-1, 1; i > 0; i, j = i-1, j+1 {
		(*buffer)[i] = byte(byte(j) ^ (byte(size) ^ (cryptTable[(*buffer)[i-1]] ^ (*buffer)[i])))
	}
}
